1. Python is my most comfortable language. Since the API was relatively short with not many endpoints, I decided to use Flask and the Flask-RESTful library because it allowed me to set up and create the API quickly using their built-in tools.

2. The API isn't suitable for a large application as it uses a list to store transactions instead of a database. If I wanted the API to be more scalable and maintainable, I would have chosen a different web framework like Django to develop the API. An advantage of using Flask for my solution is that it was easy to create in a short amount of time, provides documentation, and performs data checks for missing fields. Since sorting takes place in the spending request, spend requests may have worse performance than add requests. This is acceptable if we expect to receive more add requests than spend requests. If you expect to get more spend requests than add requests, you would want to sort the stored_transactions by timestamp in the add endpoint.

3. My favorite project I have worked on so far is a web app using Django that utilizes the Strava API and Mapbox API to create routes for runners when the user provides different inputs, such as distance or elevation. It was challenging because I was working with OAuth 2.0 and connecting to multiple APIs that communicated with each other, both of which I had never done before.